!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AFTER	Contest.Core/Contest.cs	/^            AFTER = "AFTER_",$/;"	f	class:Contest.Core.Contest	file:
AFTER_EACH	Contest.Core/Contest.cs	/^            AFTER_EACH = "AFTER_EACH";$/;"	f	class:Contest.Core.Contest	file:
ActualCases	Contest.Core/Contest.cs	/^            ActualCases = (suite, setups, teardowns) => {$/;"	f	class:Contest.Core.Contest	file:
AfterAll	Contest.Core/Runner.cs	/^		    AfterAll = null;$/;"	f	class:Contest.Core.Runner
AfterCase	Contest.Core/TestCase.cs	/^        public Action<Runner> Body, BeforeCase, AfterCase;$/;"	f	class:Contest.Core.TestCase
Assert	Contest.Core/Runner.cs	/^        public void Assert(bool cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
AssertsCount	Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
BEFORE	Contest.Core/Contest.cs	/^            BEFORE = "BEFORE_",$/;"	f	class:Contest.Core.Contest	file:
BEFORE_EACH	Contest.Core/Contest.cs	/^            BEFORE_EACH = "BEFORE_EACH",$/;"	f	class:Contest.Core.Contest	file:
Bag	Contest.Core/Runner.cs	/^        public readonly Dictionary<string, object> Bag = new Dictionary<string, object>(); $/;"	f	class:Contest.Core.Runner
BarTest	Contest.Tests/BarTest.cs	/^    class BarTest{$/;"	c	namespace:Contest.Tests
BeforeAny	Contest.Core/Runner.cs	/^			BeforeAny = null, $/;"	f	class:Contest.Core.Runner
BeforeCase	Contest.Core/TestCase.cs	/^        public Action<Runner> Body, BeforeCase, AfterCase;$/;"	f	class:Contest.Core.TestCase
Body	Contest.Core/TestCase.cs	/^        public Action<Runner> Body, BeforeCase, AfterCase;$/;"	f	class:Contest.Core.TestCase
BuildTestSuiteFromAssm	Contest.Core/Contest.cs	/^        static readonly Func<TestCaseFinder, Assembly, string, TestSuite> BuildTestSuiteFromAssm =$/;"	f	class:Contest.Core.Contest	file:
CTIGNORE_PATH	Contest.Core/IgnoreFileReader.cs	/^        const string CTIGNORE_PATH = ".\/.test_ignore";$/;"	f	class:Contest.Core.IgnoreFileReader	file:
Cases	Contest.Core/TestSuite.cs	/^        public readonly List<TestCase> Cases = new List<TestCase>();$/;"	f	class:Contest.Core.TestSuite
ClearExecTime	Contest.Core/Runner.cs	/^		void ClearExecTime(string assmName) {$/;"	m	class:Contest.Core.Runner	file:
ClearFailingCases	Contest.Core/Runner.cs	/^		void ClearFailingCases(string assmName) {$/;"	m	class:Contest.Core.Runner	file:
Contest	Contest.Core/Contest.cs	/^        static Contest() {$/;"	m	class:Contest.Core.Contest	file:
Contest	Contest.Core/Contest.cs	/^    public class Contest {$/;"	c	namespace:Contest.Core
Contest	Contest/Program.cs	/^namespace Contest {$/;"	n
Contest.Core	Contest.Core/Contest.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/ContestConstants.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/EnumerableExtensions.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/IgnoreFileReader.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/Printer.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/Runner.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/StringExtensions.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/TestCase.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/TestCaseFinder.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/TestSuite.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	Contest.Core/TypeExtensions.cs	/^namespace Contest.Core {$/;"	n
Contest.Tests	Contest.Tests/BarTest.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/EchoTest.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/FooTest.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/TestClass.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/TestClassOnePassOnFail.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/TestClassThrowingTests.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/Wrapper.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	Contest.Tests/_contest_core_tests.cs	/^namespace Contest.Tests {$/;"	n
ContestConstants	Contest.Core/ContestConstants.cs	/^	public class ContestConstants {$/;"	c	namespace:Contest.Core
ContestSetup	Contest.Tests/ContestSetup.cs	/^public class ContestSetup {$/;"	c
Contest_101	Contest.Demo/Demo.cs	/^    class Contest_101 {$/;"	c	namespace:Demo
Contest_201	Contest.Demo/Demo.cs	/^    class Contest_201 {$/;"	c	namespace:Demo
Contest_301	Contest.Demo/Demo.cs	/^	class Contest_301 {$/;"	c	namespace:Demo
CopyToLocalTmp	Contest/Program.cs	/^        static void CopyToLocalTmp(string testAssmSrcDir) {$/;"	m	class:Contest.Program	file:
CopyToLocalTmp	Inception.Test.Runner/Program.cs	/^        static void CopyToLocalTmp(string root) {$/;"	m	class:Inception.Test.Runner.Program	file:
Count	Contest.Demo/Demo.cs	/^		public static Func<int> Count = () => _users.Count;$/;"	f	class:Demo.User
Create	Contest.Demo/Demo.cs	/^		public static Action<string> Create = name => _users.Add(name);$/;"	f	class:Demo.User
Culture	Contest.Core/ContestConstants.cs	/^		public static readonly CultureInfo Culture = new CultureInfo("en-US");$/;"	f	class:Contest.Core.ContestConstants
Culture	Contest/Program.cs	/^		static readonly CultureInfo Culture = new CultureInfo("en-US");$/;"	f	class:Contest.Program	file:
DATE_FORMAT	Contest.Core/ContestConstants.cs	/^			DATE_FORMAT = "yyyy\/MM\/dd hh:mm:ss.fff";$/;"	f	class:Contest.Core.ContestConstants
Default	Contest.Core/Printer.cs	/^		static ConsoleColor Default  = ConsoleColor.Black;$/;"	f	class:Contest.Core.Printer	file:
Demo	Contest.Demo/Demo.cs	/^namespace Demo { \/\/It doesn't match naming conventions but it reads better in the console ;)$/;"	n
Die	Contest.Core/Contest.cs	/^		public static void Die(string errmsg) {$/;"	m	class:Contest.Core.Contest
DieIf	Contest.Core/Contest.cs	/^		public static void DieIf(bool cond, string errmsg) {$/;"	m	class:Contest.Core.Contest
DumpErrors	Contest.Core/Runner.cs	/^        void DumpErrors(){$/;"	m	class:Contest.Core.Runner	file:
Each	Contest.Core/EnumerableExtensions.cs	/^        public static void Each<T>(this IEnumerable<T> target, Action<T> callback) {$/;"	m	class:Contest.Core.EnumerableExtensions
Echo	Contest.Demo/Demo.cs	/^		public static Func<object, object> Echo = msg => msg;$/;"	f	class:Demo.Utils
Echo	Contest.Tests/EchoTest.cs	/^		static Func<object, object> Echo = msg => msg;$/;"	f	class:Contest.Tests.EchoTest	file:
EchoTest	Contest.Tests/EchoTest.cs	/^	internal class EchoTest {$/;"	c	namespace:Contest.Tests
Elapsed	Contest.Core/Runner.cs	/^        public long Elapsed;$/;"	f	class:Contest.Core.Runner
EnumerableExtensions	Contest.Core/EnumerableExtensions.cs	/^    public static class EnumerableExtensions {$/;"	c	namespace:Contest.Core
Equal	Contest.Core/Runner.cs	/^        public void Equal(object expected, object actual, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
ErrMsg	Contest.Core/Runner.cs	/^        public void ErrMsg(string msg, Action body) {$/;"	m	class:Contest.Core.Runner
ErrMsg	Contest.Core/Runner.cs	/^        void ErrMsg(Func<string, string, bool> compStrat, string msg, Action body) {$/;"	m	class:Contest.Core.Runner	file:
ErrMsgContains	Contest.Core/Runner.cs	/^        public void ErrMsgContains(string text, Action body) {$/;"	m	class:Contest.Core.Runner
ErrorMsgs	Contest.Demo/Demo.cs	/^	class ErrorMsgs {$/;"	c	namespace:Demo
Exception	Contest.Core/Runner.cs	/^        public void ShouldThrow<T>(Action body) where T : Exception {$/;"	p	class:Contest.Core.Runner
Exception	Contest.Core/Runner.cs	/^        public void Throws<T>(Action body) where T : Exception {$/;"	p	class:Contest.Core.Runner
ExpectedException	Contest.Core/Runner.cs	/^        static readonly Func<Type, string> ExpectedException = extype =>$/;"	f	class:Contest.Core.Runner	file:
Fail	Contest.Core/Runner.cs	/^        public void Fail(string errMsg) {$/;"	m	class:Contest.Core.Runner
FailCount	Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
Find	Contest.Demo/Demo.cs	/^		public static Func<string, object> Find = name =>$/;"	f	class:Demo.User
FindCases	Contest.Core/Contest.cs	/^        internal static Func<TestCaseFinder, Type, string, TestSuite> FindCases =$/;"	f	class:Contest.Core.Contest	file:
FindCasesInNestedTypes	Contest.Core/Contest.cs	/^            FindCasesInNestedTypes = (finder, type, flags, ignorePatterns) => {$/;"	f	class:Contest.Core.Contest	file:
FindSetups	Contest.Core/Contest.cs	/^        static readonly Func<TestSuite, List<TestCase>> FindSetups = suite =>$/;"	f	class:Contest.Core.Contest	file:
FindTeardowns	Contest.Core/Contest.cs	/^        static readonly Func<TestSuite, List<TestCase>> FindTeardowns = suite =>$/;"	f	class:Contest.Core.Contest	file:
FixName	Contest.Core/TestCase.cs	/^        public string Name, FixName;$/;"	f	class:Contest.Core.TestCase
Flags	Contest.Core/Contest.cs	/^        static readonly BF[] Flags;$/;"	f	class:Contest.Core.Contest	file:
FooTest	Contest.Tests/FooTest.cs	/^    class FooTest{$/;"	c	namespace:Contest.Tests
GetAllTypes	Contest.Core/Contest.cs	/^		static Type[] GetAllTypes (Assembly assm) {$/;"	m	class:Contest.Core.Contest	file:
GetCasesInAssm	Contest.Core/Contest.cs	/^        public static Func<TestCaseFinder, Assembly, string, TestSuite> GetCasesInAssm =$/;"	f	class:Contest.Core.Contest
GetFailFileName	Contest.Core/Contest.cs	/^		public static string  GetFailFileName(string assmFileName) {$/;"	m	class:Contest.Core.Contest
GetFullName	Contest.Core/TestCase.cs	/^        public string GetFullName() {$/;"	m	class:Contest.Core.TestCase
GetGlobalSetup	Contest.Core/Contest.cs	/^        static readonly Func<List<TestCase>,  TestCase> GetGlobalSetup = $/;"	f	class:Contest.Core.Contest	file:
GetGlobalTearDown	Contest.Core/Contest.cs	/^        static readonly Func<List<TestCase>,  TestCase> GetGlobalTearDown =$/;"	f	class:Contest.Core.Contest	file:
GetIgnoredPatternsFromFile	Contest.Core/TestCaseFinder.cs	/^        public Func<string[]> GetIgnoredPatternsFromFile = () => {$/;"	f	class:Contest.Core.TestCaseFinder
GetInitCallbackOrNull	Contest.Core/Contest.cs	/^		public static Action<Runner> GetInitCallbackOrNull (Assembly assm) {$/;"	m	class:Contest.Core.Contest
GetShutdownCallbackOrNull	Contest.Core/Contest.cs	/^		public static Action<Runner> GetShutdownCallbackOrNull (Assembly assm) {$/;"	m	class:Contest.Core.Contest
GetSingleOrNullAssmLevelSpecialType	Contest.Core/Contest.cs	/^		public static Type GetSingleOrNullAssmLevelSpecialType(Type[] types, bool lookInit) {$/;"	m	class:Contest.Core.Contest
GetTestCases	Contest.Core/Contest.cs	/^        static readonly Func<Type, BF, List<FieldInfo>> GetTestCases =$/;"	f	class:Contest.Core.Contest	file:
GetTestsTimes	Contest/Program.cs	/^		static Dictionary<string, long> GetTestsTimes(string assmFileName) {$/;"	m	class:Contest.Program	file:
GetTimeFileName	Contest.Core/Contest.cs	/^		public static string  GetTimeFileName(string assmFileName) {$/;"	m	class:Contest.Core.Contest
GetTypesR	Contest.Core/Contest.cs	/^		static Type[] GetTypesR (Type[] types) {$/;"	m	class:Contest.Core.Contest	file:
Green	Contest.Core/Printer.cs	/^		static ConsoleColor Green  = ConsoleColor.Green;$/;"	f	class:Contest.Core.Printer	file:
HandlingExceptions	Contest.Demo/Demo.cs	/^    class HandlingExceptions {$/;"	c	namespace:Demo
HasDefaultCtor	Contest.Core/TypeExtensions.cs	/^        public static bool HasDefaultCtor(this Type type) {$/;"	m	class:Contest.Core.TypeExtensions
INS_PRI	Contest.Core/Contest.cs	/^            INS_PRI = BF.Instance | BF.NonPublic,$/;"	f	class:Contest.Core.Contest	file:
INS_PUB	Contest.Core/Contest.cs	/^            INS_PUB = BF.Instance | BF.Public,$/;"	f	class:Contest.Core.Contest	file:
IgnoreCount	Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
IgnoreFileReader	Contest.Core/IgnoreFileReader.cs	/^    public class IgnoreFileReader {$/;"	c	namespace:Contest.Core
IgnoreType	Contest.Core/TestCaseFinder.cs	/^		public readonly Func<Type, bool> IgnoreType;$/;"	f	class:Contest.Core.TestCaseFinder
Ignored	Contest.Core/TestCase.cs	/^        public bool Ignored;$/;"	f	class:Contest.Core.TestCase
Inception.Test.Runner	Inception.Test.Runner/Program.cs	/^﻿namespace Inception.Test.Runner {$/;"	n
Interpol	Contest.Core/StringExtensions.cs	/^		public static string Interpol(this string placeholder, params object[] args){$/;"	m	class:Contest.Core.StringExtensions
IsFalse	Contest.Core/Runner.cs	/^        public void IsFalse(object cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsInlineCase	Contest.Core/Contest.cs	/^        static readonly Func<TestCase, bool> IsInlineCase = tcase => tcase.Body == null;$/;"	f	class:Contest.Core.Contest	file:
IsNotNull	Contest.Core/Runner.cs	/^        public void IsNotNull(object value, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsNull	Contest.Core/Runner.cs	/^        public void IsNull(object value, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsTrue	Contest.Core/Runner.cs	/^        public void IsTrue(object cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
MODDAT	Contest.Core/ContestConstants.cs	/^			MODDAT      = "moddat", $/;"	f	class:Contest.Core.ContestConstants
Main	Contest/Program.cs	/^        static void Main(string[] args) {$/;"	m	class:Contest.Program	file:
Main	Inception.Test.Runner/Program.cs	/^        static void Main(string[] args) {$/;"	m	class:Inception.Test.Runner.Program	file:
Match	Contest.Core/StringExtensions.cs	/^        public static bool Match(this string pattern, string str){$/;"	m	class:Contest.Core.StringExtensions
MatchIgnorePattern	Contest.Core/Contest.cs	/^        static readonly Func<TestCaseFinder, string, string, bool> MatchIgnorePattern =$/;"	f	class:Contest.Core.Contest	file:
MsgContains	Contest.Core/Runner.cs	/^		static Func<string, string, bool> MsgContains = (msg, chunck) => $/;"	f	class:Contest.Core.Runner	file:
MsgEq	Contest.Core/Runner.cs	/^		static Func<string, string, bool> MsgEq = (lhs, rhs) => lhs == rhs;$/;"	f	class:Contest.Core.Runner	file:
NULL	Contest.Core/Runner.cs	/^		const string NULL = "null";$/;"	f	class:Contest.Core.Runner	file:
Name	Contest.Core/TestCase.cs	/^        public string Name, FixName;$/;"	f	class:Contest.Core.TestCase
Nested	Contest.Tests/Wrapper.cs	/^        class Nested {$/;"	c	class:Contest.Tests.Wrapper
NestedBarTest	Contest.Tests/BarTest.cs	/^        class NestedBarTest{$/;"	c	class:Contest.Tests.BarTest
Not	Contest.Core/Runner.cs	/^        static readonly Func<bool, bool> Not = cnd => !cnd;$/;"	f	class:Contest.Core.Runner	file:
NotEqual	Contest.Core/Runner.cs	/^        public void NotEqual(object left, object right, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
Pass	Contest.Core/Runner.cs	/^        public void Pass() {$/;"	m	class:Contest.Core.Runner
PassCount	Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
Print	Contest.Core/Printer.cs	/^		public readonly static Action<string, ConsoleColor> Print = (msg, color) => {$/;"	f	class:Contest.Core.Printer
Print	Contest/Program.cs	/^        static void Print(IEnumerable<string> lines) {$/;"	m	class:Contest.Program	file:
Print	Contest/Program.cs	/^        static void Print(string msg, params object[] args) {$/;"	m	class:Contest.Program	file:
Print	Inception.Test.Runner/Program.cs	/^        static void Print(IEnumerable<string> lines) {$/;"	m	class:Inception.Test.Runner.Program	file:
Print	Inception.Test.Runner/Program.cs	/^        static void Print(string msg, params object[] args) {$/;"	m	class:Inception.Test.Runner.Program	file:
PrintFixName	Contest.Core/Printer.cs	/^		public readonly static Action<string> PrintFixName = name => {$/;"	f	class:Contest.Core.Printer
PrintHelp	Contest/Program.cs	/^        static void PrintHelp() {$/;"	m	class:Contest.Program	file:
PrintHelp	Inception.Test.Runner/Program.cs	/^        static void PrintHelp() {$/;"	m	class:Inception.Test.Runner.Program	file:
PrintIgnoredPatterns	Contest.Core/Contest.cs	/^        static void PrintIgnoredPatterns(string[] patterns) {$/;"	m	class:Contest.Core.Contest	file:
PrintResults	Contest.Core/Printer.cs	/^		public readonly static Action<int, long, int, int, int, int, string> PrintResults = $/;"	f	class:Contest.Core.Printer
PrintTests	Contest/Program.cs	/^		static void PrintTests(KeyValuePair<string, long>[] testsTimes) {$/;"	m	class:Contest.Program	file:
Printer	Contest.Core/Printer.cs	/^	class Printer{$/;"	c	namespace:Contest.Core
Program	Contest/Program.cs	/^    class Program {$/;"	c	namespace:Contest
Program	Inception.Test.Runner/Program.cs	/^    class Program {$/;"	c	namespace:Inception.Test.Runner
ReadAllLines	Contest.Core/IgnoreFileReader.cs	/^        public static Func<string[]> ReadAllLines = () => {$/;"	f	class:Contest.Core.IgnoreFileReader
Red	Contest.Core/Printer.cs	/^		static ConsoleColor Red    = ConsoleColor.Red;$/;"	f	class:Contest.Core.Printer	file:
Reset	Contest.Demo/Demo.cs	/^		public static Action Reset = () => _users.Clear();$/;"	f	class:Demo.User
ReuseTestAssm	Contest/Program.cs	/^		static bool ReuseTestAssm(string testAssmPath) {$/;"	m	class:Contest.Program	file:
Run	Contest.Core/Runner.cs	/^        public void Run(List<TestCase> cases, string cherryPicking = null, bool printHeaders = true) {$/;"	m	class:Contest.Core.Runner
Run	Contest.Core/Runner.cs	/^        public void Run(TestSuite suite, string cherryPicking = null, bool printHeaders = true) {$/;"	m	class:Contest.Core.Runner
Run	Contest.Core/TestCase.cs	/^        public void Run(Runner runner) {$/;"	m	class:Contest.Core.TestCase
RunFailingTests	Contest/Program.cs	/^        static void RunFailingTests(string assmFileName) {$/;"	m	class:Contest.Program	file:
RunTests	Contest/Program.cs	/^        static void RunTests(string assmFileName, string cerryPicking = null, bool printHeaders = true) {$/;"	m	class:Contest.Program	file:
RunTests	Inception.Test.Runner/Program.cs	/^        static void RunTests(string assmFileName, string cerryPicking=null, bool printHeaders=true) {$/;"	m	class:Inception.Test.Runner.Program	file:
Runner	Contest.Core/Runner.cs	/^        public Runner(string assmName = null) {$/;"	m	class:Contest.Core.Runner
Runner	Contest.Core/Runner.cs	/^    public class Runner {$/;"	c	namespace:Contest.Core
STA_PRI	Contest.Core/Contest.cs	/^            STA_PRI = BF.Static   | BF.NonPublic;$/;"	f	class:Contest.Core.Contest	file:
STA_PUB	Contest.Core/Contest.cs	/^            STA_PUB = BF.Static   | BF.Public,$/;"	f	class:Contest.Core.Contest	file:
SameMetaToken	Contest.Core/Contest.cs	/^        static readonly Func<Delegate, Delegate, bool> SameMetaToken =$/;"	f	class:Contest.Core.Contest	file:
SaveExecTime	Contest.Core/Runner.cs	/^		void SaveExecTime(string assmName) {$/;"	m	class:Contest.Core.Runner	file:
SaveFailingCases	Contest.Core/Runner.cs	/^		void SaveFailingCases(string assmName) {$/;"	m	class:Contest.Core.Runner	file:
ShowFastTests	Contest/Program.cs	/^		static void ShowFastTests(string assmFileName) {$/;"	m	class:Contest.Program	file:
ShowPreviousFails	Contest/Program.cs	/^		static void ShowPreviousFails(string assmFileName) {$/;"	m	class:Contest.Program	file:
ShowSlowTests	Contest/Program.cs	/^		static void ShowSlowTests(string assmFileName) {$/;"	m	class:Contest.Program	file:
StringExtensions	Contest.Core/StringExtensions.cs	/^    public static class StringExtensions {$/;"	c	namespace:Contest.Core
TMP	Contest.Core/ContestConstants.cs	/^			TMP         = ".tmp",$/;"	f	class:Contest.Core.ContestConstants
TestBodyCantBeNull	Contest.Core/TestCase.cs	/^        Func<string, Exception> TestBodyCantBeNull = name =>$/;"	f	class:Contest.Core.TestCase	file:
TestCase	Contest.Core/TestCase.cs	/^    public class TestCase {$/;"	c	namespace:Contest.Core
TestCaseFinder	Contest.Core/TestCaseFinder.cs	/^        public TestCaseFinder(Func<string[]> getIgnoredFromFile = null, Func<Type, bool> ignoreType = null) {$/;"	m	class:Contest.Core.TestCaseFinder
TestCaseFinder	Contest.Core/TestCaseFinder.cs	/^    public class TestCaseFinder {$/;"	c	namespace:Contest.Core
TestClass	Contest.Tests/TestClass.cs	/^    class TestClass {$/;"	c	namespace:Contest.Tests
TestClassOnePassOnFail	Contest.Tests/TestClassOnePassOnFail.cs	/^    class TestClassOnePassOnFail {$/;"	c	namespace:Contest.Tests
TestClassThrowingTests	Contest.Tests/TestClassThrowingTests.cs	/^    class TestClassThrowingTests {$/;"	c	namespace:Contest.Tests
TestCount	Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
TestSuite	Contest.Core/TestSuite.cs	/^		public TestSuite() {$/;"	m	class:Contest.Core.TestSuite
TestSuite	Contest.Core/TestSuite.cs	/^		public TestSuite(IEnumerable<TestCase> cases) {$/;"	m	class:Contest.Core.TestSuite
TestSuite	Contest.Core/TestSuite.cs	/^    public class TestSuite {$/;"	c	namespace:Contest.Core
ThisDoesntThrowSoItFails	Contest.Tests/TestClassThrowingTests.cs	/^        public Action<Runner> ThisDoesntThrowSoItFails = $/;"	f	class:Contest.Tests.TestClassThrowingTests
ThisFail	Contest.Tests/TestClassOnePassOnFail.cs	/^        Action<Runner> ThisFail = runner =>$/;"	f	class:Contest.Tests.TestClassOnePassOnFail	file:
ThisIsATest	Contest.Tests/TestClass.cs	/^        public Action<Runner> ThisIsATest = test =>$/;"	f	class:Contest.Tests.TestClass
ThisIsATest	Contest.Tests/Wrapper.cs	/^            Action<Runner> ThisIsATest = runner =>$/;"	f	class:Contest.Tests.Wrapper.Nested	file:
ThisIsAnotherTest	Contest.Tests/TestClass.cs	/^        Action<Runner> ThisIsAnotherTest = test =>$/;"	f	class:Contest.Tests.TestClass	file:
ThisIsntATestMethod	Contest.Tests/TestClass.cs	/^        public void ThisIsntATestMethod() { }$/;"	m	class:Contest.Tests.TestClass
ThisIsntATestMethod	Contest.Tests/Wrapper.cs	/^            void ThisIsntATestMethod() { }$/;"	m	class:Contest.Tests.Wrapper.Nested	file:
ThisIsntATestMethodEither	Contest.Tests/TestClass.cs	/^        void ThisIsntATestMethodEither() { }$/;"	m	class:Contest.Tests.TestClass	file:
ThisPass	Contest.Tests/TestClassOnePassOnFail.cs	/^        public Action<Runner> ThisPass = runner =>$/;"	f	class:Contest.Tests.TestClassOnePassOnFail
ThisThrowsAndPass	Contest.Tests/TestClassThrowingTests.cs	/^        public Action<Runner> ThisThrowsAndPass = $/;"	f	class:Contest.Tests.TestClassThrowingTests
ToString	Contest.Core/TestCase.cs	/^        public override string ToString() {$/;"	m	class:Contest.Core.TestCase
TryUpdateModDat	Contest/Program.cs	/^		static void TryUpdateModDat(string testAssmPath) {$/;"	m	class:Contest.Program	file:
TypeExtensions	Contest.Core/TypeExtensions.cs	/^    public static class TypeExtensions {$/;"	c	namespace:Contest.Core
User	Contest.Demo/Demo.cs	/^	public class User {	$/;"	c	namespace:Demo
Utils	Contest.Demo/Demo.cs	/^	class Utils {$/;"	c	namespace:Demo
Verbose	Contest.Core/Runner.cs	/^		public bool Verbose = false;$/;"	f	class:Contest.Core.Runner
WireGlobalSetups	Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireGlobalSetups = (actual, setups) => {$/;"	f	class:Contest.Core.Contest	file:
WireGlobalTeardowns	Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireGlobalTeardowns =$/;"	f	class:Contest.Core.Contest	file:
WireSetups	Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireSetups =$/;"	f	class:Contest.Core.Contest	file:
WireTeardowns	Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireTeardowns =$/;"	f	class:Contest.Core.Contest	file:
Wrapper	Contest.Tests/Wrapper.cs	/^    class Wrapper {$/;"	c	namespace:Contest.Tests
WrongKindaException	Contest.Core/Runner.cs	/^        static readonly Func<Type, Type, string> WrongKindaException = $/;"	f	class:Contest.Core.Runner	file:
Yellow	Contest.Core/Printer.cs	/^		static ConsoleColor Yellow = ConsoleColor.Yellow;$/;"	f	class:Contest.Core.Printer	file:
_assmName	Contest.Core/Runner.cs	/^		readonly string _assmName;$/;"	f	class:Contest.Core.Runner	file:
_cerryPeekingFinder	Contest.Tests/_contest_core_tests.cs	/^        static readonly TestCaseFinder _cerryPeekingFinder = new TestCaseFinder(null, $/;"	f	class:Contest.Tests.contest_core_tests	file:
_currCase	Contest.Core/Runner.cs	/^        string _currCase, _currCaseFullName;$/;"	f	class:Contest.Core.Runner	file:
_currCaseFullName	Contest.Core/Runner.cs	/^        string _currCase, _currCaseFullName;$/;"	f	class:Contest.Core.Runner	file:
_discoveryFinder	Contest.Tests/_contest_core_tests.cs	/^        static readonly TestCaseFinder _discoveryFinder = new TestCaseFinder(null,$/;"	f	class:Contest.Tests.contest_core_tests	file:
_errors	Contest.Core/Runner.cs	/^        readonly Dictionary<string, string> _errors       = new Dictionary<string, string>();$/;"	f	class:Contest.Core.Runner	file:
_failingCasesFullNames	Contest.Core/Runner.cs	/^		readonly List<string> _failingCasesFullNames = new List<string>();$/;"	f	class:Contest.Core.Runner	file:
_testExecTime	Contest.Core/Runner.cs	/^        readonly Dictionary<string, long>   _testExecTime = new Dictionary<string, long>();$/;"	f	class:Contest.Core.Runner	file:
_users	Contest.Demo/Demo.cs	/^		static readonly List<string> _users = new List<string>();$/;"	f	class:Demo.User	file:
after_bar	Contest.Tests/BarTest.cs	/^            Action<Runner> after_bar  = runner => {};$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
after_each	Contest.Bugs/DuplicateSetups.cs	/^	_ after_each  = test => { WriteLine(">>>> fixture teardown"); };$/;"	f	class:fixure_wide_setup_teardown	file:
after_each	Contest.Demo/Demo.cs	/^		_ after_each = test =>$/;"	f	class:Demo.Contest_201	file:
after_echo	Contest.Demo/Demo.cs	/^		_ after_echo = test => $/;"	f	class:Demo.Contest_301	file:
after_echo	Contest.Tests/EchoTest.cs	/^		Action<Runner> after_echo = test =>$/;"	f	class:Contest.Tests.EchoTest	file:
after_foo	Contest.Bugs/DuplicateSetups.cs	/^	_ after_foo  = test => { WriteLine(">>>> foo teardown"); };$/;"	f	class:case_specific_setup_teardown	file:
after_foo	Contest.Tests/FooTest.cs	/^        Action<Runner> after_foo  = runner => {};$/;"	f	class:Contest.Tests.FooTest	file:
bag_ConfigureTestVariablesDuringSetup	Contest.Tests/_contest_core_tests.cs	/^        _ bag_ConfigureTestVariablesDuringSetup = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
bar	Contest.Bugs/DuplicateSetups.cs	/^	_ bar = assert => assert.Pass();$/;"	f	class:fixure_wide_setup_teardown	file:
bar	Contest.Tests/BarTest.cs	/^            Action<Runner> bar = assert => assert.Equal(1, 2);$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
baz	Contest.Bugs/DuplicateSetups.cs	/^	_ baz	   = assert => assert.Pass();$/;"	f	class:case_specific_setup_teardown	file:
bazzinga	Contest.Bugs/DuplicateSetups.cs	/^	_ bazzinga = assert => assert.Pass();$/;"	f	class:case_specific_setup_teardown	file:
before_bar	Contest.Tests/BarTest.cs	/^            Action<Runner> before_bar = runner => {};$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
before_each	Contest.Bugs/DuplicateSetups.cs	/^	_ before_each = test => { WriteLine(">>>> fixture setup"); };$/;"	f	class:fixure_wide_setup_teardown	file:
before_each	Contest.Demo/Demo.cs	/^		_ before_each = test => {$/;"	f	class:Demo.Contest_201	file:
before_echo	Contest.Demo/Demo.cs	/^		_ before_echo = test => $/;"	f	class:Demo.Contest_301	file:
before_echo	Contest.Tests/EchoTest.cs	/^		Action<Runner> before_echo = test =>$/;"	f	class:Contest.Tests.EchoTest	file:
before_foo	Contest.Bugs/DuplicateSetups.cs	/^	_ before_foo = test => { WriteLine(">>>> foo setup"); };$/;"	f	class:case_specific_setup_teardown	file:
before_foo	Contest.Tests/FooTest.cs	/^        Action<Runner> before_foo = runner => {};$/;"	f	class:Contest.Tests.FooTest	file:
case_specific_setup_teardown	Contest.Bugs/DuplicateSetups.cs	/^class case_specific_setup_teardown {$/;"	c
cherry_pick_cases_containing	Contest.Tests/_contest_core_tests.cs	/^        _ cherry_pick_cases_containing = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
cherry_pick_cases_ending_with	Contest.Tests/_contest_core_tests.cs	/^        _ cherry_pick_cases_ending_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
cherry_pick_cases_starting_with	Contest.Tests/_contest_core_tests.cs	/^        _ cherry_pick_cases_starting_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
contest_core_tests	Contest.Tests/_contest_core_tests.cs	/^    public class contest_core_tests {$/;"	c	namespace:Contest.Tests
create_user_adds_new_user	Contest.Demo/Demo.cs	/^		_ create_user_adds_new_user = assert => {$/;"	f	class:Demo.Contest_201	file:
dicsover_before_test_cases_in_assm	Contest.Tests/_contest_core_tests.cs	/^        _ dicsover_before_test_cases_in_assm = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
discover_after_test_cases_in_class	Contest.Tests/_contest_core_tests.cs	/^        _ discover_after_test_cases_in_class = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
discover_test_cases_in_class	Contest.Tests/_contest_core_tests.cs	/^        _ discover_test_cases_in_class = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
discover_test_cases_in_nested_classes	Contest.Tests/_contest_core_tests.cs	/^        _ discover_test_cases_in_nested_classes = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
echo	Contest.Demo/Demo.cs	/^		_ echo = test => $/;"	f	class:Demo.Contest_301	file:
echo	Contest.Tests/EchoTest.cs	/^		Action<Runner> echo = test =>$/;"	f	class:Contest.Tests.EchoTest	file:
exptect_error_message_contains_fails	Contest.Demo/Demo.cs	/^		_ exptect_error_message_contains_fails = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_contains_pass	Contest.Demo/Demo.cs	/^		_ exptect_error_message_contains_pass = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_fails	Contest.Demo/Demo.cs	/^		_ exptect_error_message_fails = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_pass	Contest.Demo/Demo.cs	/^		_ exptect_error_message_pass = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
find_assm_level_setup	Contest.Tests/_contest_core_tests.cs	/^		_ find_assm_level_setup = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
find_existing_user_returns_user	Contest.Demo/Demo.cs	/^		_ find_existing_user_returns_user = assert => $/;"	f	class:Demo.Contest_201	file:
find_non_existing_user_returns_null	Contest.Demo/Demo.cs	/^		_ find_non_existing_user_returns_null = assert => $/;"	f	class:Demo.Contest_201	file:
fixure_wide_setup_teardown	Contest.Bugs/DuplicateSetups.cs	/^class fixure_wide_setup_teardown {$/;"	c
foo	Contest.Bugs/DuplicateSetups.cs	/^	_ foo      = assert => assert.Pass();$/;"	f	class:case_specific_setup_teardown	file:
foo	Contest.Bugs/DuplicateSetups.cs	/^	_ foo = assert => assert.Pass();$/;"	f	class:fixure_wide_setup_teardown	file:
foo	Contest.Tests/FooTest.cs	/^        Action<Runner> foo = assert => assert.Equal(1, 2);$/;"	f	class:Contest.Tests.FooTest	file:
from_cmd_line_ignore_all_cases	Contest.Tests/_contest_core_tests.cs	/^		_ from_cmd_line_ignore_all_cases = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
from_cmd_line_ignore_cases_ending_with	Contest.Tests/_contest_core_tests.cs	/^		_ from_cmd_line_ignore_cases_ending_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
from_cmd_line_ignore_cases_starting_with	Contest.Tests/_contest_core_tests.cs	/^		_ from_cmd_line_ignore_cases_starting_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
from_cmd_line_ignore_cases_when_contains	Contest.Tests/_contest_core_tests.cs	/^		_ from_cmd_line_ignore_cases_when_contains = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
from_cmd_line_ignore_no_cases	Contest.Tests/_contest_core_tests.cs	/^		_ from_cmd_line_ignore_no_cases = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
ignore_file_ignore_all_cases	Contest.Tests/_contest_core_tests.cs	/^		_ ignore_file_ignore_all_cases = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
ignore_file_ignore_cases_ending_with	Contest.Tests/_contest_core_tests.cs	/^		_ ignore_file_ignore_cases_ending_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
ignore_file_ignore_cases_starting_with	Contest.Tests/_contest_core_tests.cs	/^		_ ignore_file_ignore_cases_starting_with = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
ignore_file_ignore_cases_when_contains	Contest.Tests/_contest_core_tests.cs	/^		_ ignore_file_ignore_cases_when_contains = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
ignore_file_ignore_no_cases	Contest.Tests/_contest_core_tests.cs	/^		_ ignore_file_ignore_no_cases = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
it_should_treat_exceptions_as_failing_tests	Contest.Demo/Demo.cs	/^        _ it_should_treat_exceptions_as_failing_tests = assert => {$/;"	f	class:Demo.HandlingExceptions	file:
read_empty_ignore_file	Contest.Tests/_contest_core_tests.cs	/^		_ read_empty_ignore_file = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
read_ignore_file_colon_sep_values	Contest.Tests/_contest_core_tests.cs	/^		_ read_ignore_file_colon_sep_values = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
read_ignore_file_comma_sep_values	Contest.Tests/_contest_core_tests.cs	/^		_ read_ignore_file_comma_sep_values = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
read_ignore_file_newline_sep_values	Contest.Tests/_contest_core_tests.cs	/^		_ read_ignore_file_newline_sep_values = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
read_ignore_file_should_trim_white_space	Contest.Tests/_contest_core_tests.cs	/^		_ read_ignore_file_should_trim_white_space = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
read_ignore_file_space_sep_values	Contest.Tests/_contest_core_tests.cs	/^		_ read_ignore_file_space_sep_values = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
run_test_suite	Contest.Tests/_contest_core_tests.cs	/^        _ run_test_suite = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
run_throwing_test_suite	Contest.Tests/_contest_core_tests.cs	/^        _ run_throwing_test_suite = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertEqualsMethod_NullValue_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertEqualsMethod_NullValue_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertEqualsMethod_NullValue_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertEqualsMethod_NullValue_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertEqualsMethod_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertEqualsMethod_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertEqualsMethod_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertEqualsMethod_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertIsNotNull_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertIsNotNull_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertIsNotNull_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertIsNotNull_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertIsNull_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertIsNull_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertIsNull_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertIsNull_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertMethod_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertMethod_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertMethod_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertMethod_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertNotEqualsMethod_ResultIsFalse	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertNotEqualsMethod_ResultIsFalse = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
runner_assertNotEqualsMethod_ResultIsTrue	Contest.Tests/_contest_core_tests.cs	/^        _ runner_assertNotEqualsMethod_ResultIsTrue = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
should_run_setup_before_case_unless_setup_is_null	Contest.Tests/_contest_core_tests.cs	/^        _ should_run_setup_before_case_unless_setup_is_null = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
should_run_teardown_after_case_unless_teardown_is_null	Contest.Tests/_contest_core_tests.cs	/^        _ should_run_teardown_after_case_unless_teardown_is_null = assert => {$/;"	f	class:Contest.Tests.contest_core_tests	file:
this_is_a__should_throw__failing_test	Contest.Demo/Demo.cs	/^		_ this_is_a__should_throw__failing_test = test =>$/;"	f	class:Demo.Contest_101	file:
this_is_a__should_throw__passing_test	Contest.Demo/Demo.cs	/^        _ this_is_a__should_throw__passing_test = test =>$/;"	f	class:Demo.Contest_101	file:
this_is_a_failing_test	Contest.Demo/Demo.cs	/^		_ this_is_a_failing_test = assert =>$/;"	f	class:Demo.Contest_101	file:
this_is_a_passing_test	Contest.Demo/Demo.cs	/^		_ this_is_a_passing_test = assert => $/;"	f	class:Demo.Contest_101	file:
utils_match_cherry_picking_pattern	Contest.Tests/_contest_core_tests.cs	/^		_ utils_match_cherry_picking_pattern = assert =>$/;"	f	class:Contest.Tests.contest_core_tests	file:
