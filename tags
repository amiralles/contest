!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AFTER	src/Contest.Core/Contest.cs	/^            AFTER = "AFTER_",$/;"	f	class:Contest.Core.Contest	file:
AFTER_EACH	src/Contest.Core/Contest.cs	/^            AFTER_EACH = "AFTER_EACH";$/;"	f	class:Contest.Core.Contest	file:
ActualCases	src/Contest.Core/Contest.cs	/^            ActualCases = (suite, setups, teardowns) => {$/;"	f	class:Contest.Core.Contest	file:
AfterCase	src/Contest.Core/TestCase.cs	/^        public Action<Runner> AfterCase;$/;"	f	class:Contest.Core.TestCase
Assert	src/Contest.Core/Runner.cs	/^        public void Assert(bool cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
AssertEqualsMethod_NullValue_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertEqualsMethod_NullValue_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertEqualsMethod_NullValue_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertEqualsMethod_NullValue_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertEqualsMethod_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertEqualsMethod_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertEqualsMethod_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertEqualsMethod_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertIsNotNull_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertIsNotNull_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertIsNotNull_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertIsNotNull_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertIsNull_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertIsNull_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertIsNull_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertIsNull_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertMethod_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertMethod_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertMethod_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertMethod_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertNotEqualsMethod_ResultIsFalse	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertNotEqualsMethod_ResultIsFalse() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertNotEqualsMethod_ResultIsTrue	src/Contest.Tests/RunnerFixture.cs	/^        public void AssertNotEqualsMethod_ResultIsTrue() {$/;"	m	class:Contest.Tests.RunnerFixture
AssertsCount	src/Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
BEFORE	src/Contest.Core/Contest.cs	/^            BEFORE = "BEFORE_",$/;"	f	class:Contest.Core.Contest	file:
BEFORE_EACH	src/Contest.Core/Contest.cs	/^            BEFORE_EACH = "BEFORE_EACH",$/;"	f	class:Contest.Core.Contest	file:
Bag	src/Contest.Core/Runner.cs	/^        public readonly Dictionary<string, object> Bag = new Dictionary<string, object>(); $/;"	f	class:Contest.Core.Runner
BarTest	src/Contest.Tests/BarTest.cs	/^    class BarTest{$/;"	c	namespace:Contest.Tests
BeforeCase	src/Contest.Core/TestCase.cs	/^        public Action<Runner> BeforeCase;$/;"	f	class:Contest.Core.TestCase
Body	src/Contest.Core/TestCase.cs	/^        public Action<Runner> Body;$/;"	f	class:Contest.Core.TestCase
CTIGNORE_PATH	src/Contest.Core/IgnoreFileReader.cs	/^        const string CTIGNORE_PATH = ".\/.test_ignore";$/;"	f	class:Contest.Core.IgnoreFileReader	file:
Cases	src/Contest.Core/TestSuite.cs	/^        public readonly List<TestCase> Cases = new List<TestCase>();$/;"	f	class:Contest.Core.TestSuite
CherryPickingFixture	src/Contest.Tests/CherryPickingFixture.cs	/^    public class CherryPickingFixture {$/;"	c	namespace:Contest.Tests
ColonSepValues	src/Contest.Tests/IgnoreFixture.cs	/^            public void ColonSepValues() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
CommaSepValues	src/Contest.Tests/IgnoreFixture.cs	/^            public void CommaSepValues() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
ConfigureTestVariablesDuringSetup	src/Contest.Tests/UsingRunnersBag.cs	/^        public void ConfigureTestVariablesDuringSetup(){$/;"	m	class:Contest.Tests.UsingRunnersBag
Contains	src/Contest.Tests/MatchCherryPickingPatterns.cs	/^        public void Contains(){$/;"	m	class:Contest.Tests.MatchCherryPickingPatterns
Contest	src/Contest.Core/Contest.cs	/^        static Contest() {$/;"	m	class:Contest.Core.Contest	file:
Contest	src/Contest.Core/Contest.cs	/^    public class Contest {$/;"	c	namespace:Contest.Core
Contest	src/Contest/Program.cs	/^﻿namespace Contest {$/;"	n
Contest.Core	src/Contest.Core/Contest.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/EnumerableExtensions.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/IgnoreFileReader.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/Printer.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/Runner.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/StringExtensions.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/TestCase.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/TestCaseFinder.cs	/^﻿namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/TestSuite.cs	/^namespace Contest.Core {$/;"	n
Contest.Core	src/Contest.Core/TypeExtensions.cs	/^namespace Contest.Core {$/;"	n
Contest.Tests	src/Contest.Tests/BarTest.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/CherryPickingFixture.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/DiscoverFixture.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/FooTest.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/IgnoreFixture.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/MatchCherryPickingPatterns.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/RunFixture.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/RunSetupsAndTeardowns.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/RunnerFixture.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/TestClass.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/TestClassOnePassOnFail.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/TestClassThrowingTests.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/UsingRunnersBag.cs	/^namespace Contest.Tests {$/;"	n
Contest.Tests	src/Contest.Tests/Wrapper.cs	/^﻿namespace Contest.Tests {$/;"	n
Contest_101	src/Contest.Demo/Demo.cs	/^    class Contest_101 {$/;"	c	namespace:Demo
Contest_201	src/Contest.Demo/Demo.cs	/^    class Contest_201 {$/;"	c	namespace:Demo
Contest_301	src/Contest.Demo/Demo.cs	/^	class Contest_301 {$/;"	c	namespace:Demo
CopyToLocalTmp	src/Contest/Program.cs	/^        static void CopyToLocalTmp(string root) {$/;"	m	class:Contest.Program	file:
Count	src/Contest.Demo/Demo.cs	/^		public static Func<int> Count = () => _users.Count;$/;"	f	class:Demo.User
Create	src/Contest.Demo/Demo.cs	/^		public static Action<string> Create = name => _users.Add(name);$/;"	f	class:Demo.User
Demo	src/Contest.Demo/Demo.cs	/^﻿namespace Demo { \/\/It doesn't match naming conventions but it reads better in the console ;)$/;"	n
DiscoverFixture	src/Contest.Tests/DiscoverFixture.cs	/^    public class DiscoverFixture {$/;"	c	namespace:Contest.Tests
DumpErrors	src/Contest.Core/Runner.cs	/^        void DumpErrors(){$/;"	m	class:Contest.Core.Runner	file:
Each	src/Contest.Core/EnumerableExtensions.cs	/^        public static void Each<T>(this IEnumerable<T> target, Action<T> callback) {$/;"	m	class:Contest.Core.EnumerableExtensions
Echo	src/Contest.Demo/Demo.cs	/^		public static Func<object, object> Echo = msg => msg;$/;"	f	class:Demo.Utils
Echo	src/Contest.Tests/UsingRunnersBag.cs	/^        static Func<object, object> Echo = msg => msg;$/;"	f	class:Contest.Tests.UsingRunnersBag	file:
EchoTest	src/Contest.Tests/UsingRunnersBag.cs	/^        internal class EchoTest {$/;"	c	class:Contest.Tests.UsingRunnersBag
Elapsed	src/Contest.Core/Runner.cs	/^        public long Elapsed;$/;"	f	class:Contest.Core.Runner
EmptyFile	src/Contest.Tests/IgnoreFixture.cs	/^            public void EmptyFile() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
EnumerableExtensions	src/Contest.Core/EnumerableExtensions.cs	/^    public static class EnumerableExtensions {$/;"	c	namespace:Contest.Core
Equal	src/Contest.Core/Runner.cs	/^        public void Equal(object expected, object actual, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
ErrMsg	src/Contest.Core/Runner.cs	/^        public void ErrMsg(string msg, Action body) {$/;"	m	class:Contest.Core.Runner
ErrMsg	src/Contest.Core/Runner.cs	/^        void ErrMsg(Func<string, string, bool> compStrat, string msg, Action body) {$/;"	m	class:Contest.Core.Runner	file:
ErrMsgContains	src/Contest.Core/Runner.cs	/^        public void ErrMsgContains(string text, Action body) {$/;"	m	class:Contest.Core.Runner
ErrorMsgs	src/Contest.Demo/Demo.cs	/^	class ErrorMsgs {$/;"	c	namespace:Demo
Exception	src/Contest.Core/Runner.cs	/^        public void ShouldThrow<T>(Action body) where T : Exception {$/;"	p	class:Contest.Core.Runner
ExpectedException	src/Contest.Core/Runner.cs	/^        static readonly Func<Type, string> ExpectedException = extype =>$/;"	f	class:Contest.Core.Runner	file:
Fail	src/Contest.Core/Runner.cs	/^        public void Fail(string errMsg) {$/;"	m	class:Contest.Core.Runner
FailCount	src/Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
Find	src/Contest.Demo/Demo.cs	/^		public static Func<string, object> Find = name =>$/;"	f	class:Demo.User
FindCases	src/Contest.Core/Contest.cs	/^        internal static Func<TestCaseFinder, Type, string, TestSuite> FindCases =$/;"	f	class:Contest.Core.Contest	file:
FindCasesNestedTypes	src/Contest.Core/Contest.cs	/^            FindCasesNestedTypes = (finder, type, flags, ignorePatterns) => {$/;"	f	class:Contest.Core.Contest	file:
FindRawCasesInAssm	src/Contest.Core/Contest.cs	/^        static readonly Func<TestCaseFinder, Assembly, string, TestSuite> FindRawCasesInAssm =$/;"	f	class:Contest.Core.Contest	file:
FindSetups	src/Contest.Core/Contest.cs	/^        static readonly Func<TestSuite, List<TestCase>> FindSetups = suite =>$/;"	f	class:Contest.Core.Contest	file:
FindTeardowns	src/Contest.Core/Contest.cs	/^        static readonly Func<TestSuite, List<TestCase>> FindTeardowns = suite =>$/;"	f	class:Contest.Core.Contest	file:
FixName	src/Contest.Core/TestCase.cs	/^        public string Name, FixName;$/;"	f	class:Contest.Core.TestCase
Flags	src/Contest.Core/Contest.cs	/^        static readonly BF[] Flags;$/;"	f	class:Contest.Core.Contest	file:
FooTest	src/Contest.Tests/FooTest.cs	/^    class FooTest{$/;"	c	namespace:Contest.Tests
GetCasesInAssm	src/Contest.Core/Contest.cs	/^        public static Func<TestCaseFinder, Assembly, string, TestSuite> GetCasesInAssm =$/;"	f	class:Contest.Core.Contest
GetFullName	src/Contest.Core/TestCase.cs	/^        public string GetFullName() {$/;"	m	class:Contest.Core.TestCase
GetGlobalSetup	src/Contest.Core/Contest.cs	/^        static readonly Func<List<TestCase>, TestCase> GetGlobalSetup = setups =>$/;"	f	class:Contest.Core.Contest	file:
GetGlobalTearDown	src/Contest.Core/Contest.cs	/^        static readonly Func<List<TestCase>, TestCase> GetGlobalTearDown = teardowns =>$/;"	f	class:Contest.Core.Contest	file:
GetIgnoredPatternsFromFile	src/Contest.Core/TestCaseFinder.cs	/^        public Func<string[]> GetIgnoredPatternsFromFile = () => {$/;"	f	class:Contest.Core.TestCaseFinder
GetTestCases	src/Contest.Core/Contest.cs	/^        static readonly Func<Type, BF, List<FieldInfo>> GetTestCases =$/;"	f	class:Contest.Core.Contest	file:
Green	src/Contest.Core/Printer.cs	/^		static ConsoleColor Green  = ConsoleColor.Green;$/;"	f	class:Contest.Core.Printer	file:
HandlingExceptions	src/Contest.Demo/Demo.cs	/^    class HandlingExceptions {$/;"	c	namespace:Demo
HasDefaultCtor	src/Contest.Core/TypeExtensions.cs	/^        public static bool HasDefaultCtor(this Type type) {$/;"	m	class:Contest.Core.TypeExtensions
INS_PRI	src/Contest.Core/Contest.cs	/^            INS_PRI = BF.Instance | BF.NonPublic,$/;"	f	class:Contest.Core.Contest	file:
INS_PUB	src/Contest.Core/Contest.cs	/^            INS_PUB = BF.Instance | BF.Public,$/;"	f	class:Contest.Core.Contest	file:
IgnoreCount	src/Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
IgnoreFileReader	src/Contest.Core/IgnoreFileReader.cs	/^    public class IgnoreFileReader {$/;"	c	namespace:Contest.Core
IgnoreFixture	src/Contest.Tests/IgnoreFixture.cs	/^    public class IgnoreFixture {$/;"	c	namespace:Contest.Tests
Ignored	src/Contest.Core/TestCase.cs	/^        public bool Ignored;$/;"	f	class:Contest.Core.TestCase
InlineCase	src/Contest.Core/Contest.cs	/^        static readonly Func<TestCase, bool> InlineCase = tcase => tcase.Body == null;$/;"	f	class:Contest.Core.Contest	file:
Interpol	src/Contest.Core/StringExtensions.cs	/^		public static string Interpol(this string placeholder, params object[] args){$/;"	m	class:Contest.Core.StringExtensions
IsFalse	src/Contest.Core/Runner.cs	/^        public void IsFalse(object cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsNotNull	src/Contest.Core/Runner.cs	/^        public void IsNotNull(object value, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsNull	src/Contest.Core/Runner.cs	/^        public void IsNull(object value, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
IsTrue	src/Contest.Core/Runner.cs	/^        public void IsTrue(object cond, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
Main	src/Contest/Program.cs	/^        static void Main(string[] args) {$/;"	m	class:Contest.Program	file:
Match	src/Contest.Core/StringExtensions.cs	/^        public static bool Match(this string pattern, string str){$/;"	m	class:Contest.Core.StringExtensions
MatchCherryPickingPatterns	src/Contest.Tests/MatchCherryPickingPatterns.cs	/^    public class MatchCherryPickingPatterns{$/;"	c	namespace:Contest.Tests
MatchIgnorePattern	src/Contest.Core/Contest.cs	/^        static readonly Func<TestCaseFinder, string, string, bool> MatchIgnorePattern =$/;"	f	class:Contest.Core.Contest	file:
MsgContains	src/Contest.Core/Runner.cs	/^		static Func<string, string, bool> MsgContains = (msg, chunck) => $/;"	f	class:Contest.Core.Runner	file:
MsgEq	src/Contest.Core/Runner.cs	/^		static Func<string, string, bool> MsgEq = (lhs, rhs) => lhs == rhs;$/;"	f	class:Contest.Core.Runner	file:
Name	src/Contest.Core/TestCase.cs	/^        public string Name, FixName;$/;"	f	class:Contest.Core.TestCase
Nested	src/Contest.Tests/Wrapper.cs	/^        class Nested {$/;"	c	class:Contest.Tests.Wrapper
NestedBarTest	src/Contest.Tests/BarTest.cs	/^        class NestedBarTest{$/;"	c	class:Contest.Tests.BarTest
NewLineSepValues	src/Contest.Tests/IgnoreFixture.cs	/^            public void NewLineSepValues() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
Not	src/Contest.Core/Runner.cs	/^        static readonly Func<bool, bool> Not = cnd => !cnd;$/;"	f	class:Contest.Core.Runner	file:
NotEqual	src/Contest.Core/Runner.cs	/^        public void NotEqual(object left, object right, string errMsg = null) {$/;"	m	class:Contest.Core.Runner
Pass	src/Contest.Core/Runner.cs	/^        public void Pass() {$/;"	m	class:Contest.Core.Runner
PassCount	src/Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
PatternsFromCmdLine	src/Contest.Tests/IgnoreFixture.cs	/^        class PatternsFromCmdLine {$/;"	c	class:Contest.Tests.IgnoreFixture
PatternsFromIgnoreFile	src/Contest.Tests/IgnoreFixture.cs	/^        class PatternsFromIgnoreFile {$/;"	c	class:Contest.Tests.IgnoreFixture
Print	src/Contest.Core/Printer.cs	/^		public readonly static Action<string, ConsoleColor> Print = (msg, color) => {$/;"	f	class:Contest.Core.Printer
Print	src/Contest/Program.cs	/^        static void Print(IEnumerable<string> lines) {$/;"	m	class:Contest.Program	file:
Print	src/Contest/Program.cs	/^        static void Print(string msg, params object[] args) {$/;"	m	class:Contest.Program	file:
PrintFixName	src/Contest.Core/Printer.cs	/^		public readonly static Action<string> PrintFixName = name => {$/;"	f	class:Contest.Core.Printer
PrintHelp	src/Contest/Program.cs	/^        static void PrintHelp() {$/;"	m	class:Contest.Program	file:
PrintIgnoredPatterns	src/Contest.Core/Contest.cs	/^        static void PrintIgnoredPatterns(string[] patterns) {$/;"	m	class:Contest.Core.Contest	file:
PrintResults	src/Contest.Core/Printer.cs	/^		public readonly static Action<int, long, int, int, int, int, string> PrintResults = $/;"	f	class:Contest.Core.Printer
Printer	src/Contest.Core/Printer.cs	/^	class Printer{$/;"	c	namespace:Contest.Core
Program	src/Contest/Program.cs	/^    class Program {$/;"	c	namespace:Contest
ReadAllLines	src/Contest.Core/IgnoreFileReader.cs	/^        public static Func<string[]> ReadAllLines = () => {$/;"	f	class:Contest.Core.IgnoreFileReader
ReadIgnoreFile	src/Contest.Tests/IgnoreFixture.cs	/^        class ReadIgnoreFile {$/;"	c	class:Contest.Tests.IgnoreFixture
Red	src/Contest.Core/Printer.cs	/^		static ConsoleColor Red    = ConsoleColor.Red;$/;"	f	class:Contest.Core.Printer	file:
Reset	src/Contest.Demo/Demo.cs	/^		public static Action Reset = () => _users.Clear();$/;"	f	class:Demo.User
Run	src/Contest.Core/Runner.cs	/^        public void Run(List<TestCase> cases, string cherryPicking = null, bool printHeaders=true) {$/;"	m	class:Contest.Core.Runner
Run	src/Contest.Core/Runner.cs	/^        public void Run(TestSuite suite, string cherryPicking = null, bool printHeaders=true) {$/;"	m	class:Contest.Core.Runner
Run	src/Contest.Core/TestCase.cs	/^        public void Run(Runner runner) {$/;"	m	class:Contest.Core.TestCase
RunFixture	src/Contest.Tests/RunFixture.cs	/^    public class RunFixture {$/;"	c	namespace:Contest.Tests
RunSetupAndTeardown	src/Contest.Tests/RunSetupsAndTeardowns.cs	/^    public class RunSetupAndTeardown {$/;"	c	namespace:Contest.Tests
RunTests	src/Contest/Program.cs	/^        static void RunTests(string assmFileName, string cerryPicking=null, bool printHeaders=true) {$/;"	m	class:Contest.Program	file:
Runner	src/Contest.Core/Runner.cs	/^        public Runner() {$/;"	m	class:Contest.Core.Runner
Runner	src/Contest.Core/Runner.cs	/^    public class Runner {$/;"	c	namespace:Contest.Core
RunnerFixture	src/Contest.Tests/RunnerFixture.cs	/^    public class RunnerFixture {$/;"	c	namespace:Contest.Tests
STA_PRI	src/Contest.Core/Contest.cs	/^            STA_PRI = BF.Static | BF.NonPublic;$/;"	f	class:Contest.Core.Contest	file:
STA_PUB	src/Contest.Core/Contest.cs	/^            STA_PUB = BF.Static | BF.Public,$/;"	f	class:Contest.Core.Contest	file:
SameMetaToken	src/Contest.Core/Contest.cs	/^        static readonly Func<Delegate, Delegate, bool> SameMetaToken =$/;"	f	class:Contest.Core.Contest	file:
SpaceSepValues	src/Contest.Tests/IgnoreFixture.cs	/^            public void SpaceSepValues() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
StringExtensions	src/Contest.Core/StringExtensions.cs	/^    public static class StringExtensions {$/;"	c	namespace:Contest.Core
TMP	src/Contest/Program.cs	/^        const string TMP = "tmp";$/;"	f	class:Contest.Program	file:
TestBodyCantBeNull	src/Contest.Core/TestCase.cs	/^        Func<string, Exception> TestBodyCantBeNull = name =>$/;"	f	class:Contest.Core.TestCase	file:
TestCase	src/Contest.Core/TestCase.cs	/^    public class TestCase {$/;"	c	namespace:Contest.Core
TestCaseFinder	src/Contest.Core/TestCaseFinder.cs	/^        public TestCaseFinder(Func<string[]> getIgnoredFromFile = null) {$/;"	m	class:Contest.Core.TestCaseFinder
TestCaseFinder	src/Contest.Core/TestCaseFinder.cs	/^    public class TestCaseFinder {$/;"	c	namespace:Contest.Core
TestClass	src/Contest.Tests/TestClass.cs	/^    class TestClass {$/;"	c	namespace:Contest.Tests
TestClassOnePassOnFail	src/Contest.Tests/TestClassOnePassOnFail.cs	/^    class TestClassOnePassOnFail {$/;"	c	namespace:Contest.Tests
TestClassThrowingTests	src/Contest.Tests/TestClassThrowingTests.cs	/^    class TestClassThrowingTests {$/;"	c	namespace:Contest.Tests
TestCount	src/Contest.Core/Runner.cs	/^        public int PassCount, FailCount, AssertsCount, TestCount, IgnoreCount;$/;"	f	class:Contest.Core.Runner
TestSuite	src/Contest.Core/TestSuite.cs	/^		public TestSuite() {$/;"	m	class:Contest.Core.TestSuite
TestSuite	src/Contest.Core/TestSuite.cs	/^    public class TestSuite {$/;"	c	namespace:Contest.Core
ThisDoesntThrowSoItFails	src/Contest.Tests/TestClassThrowingTests.cs	/^        public Action<Runner> ThisDoesntThrowSoItFails = $/;"	f	class:Contest.Tests.TestClassThrowingTests
ThisFail	src/Contest.Tests/TestClassOnePassOnFail.cs	/^        Action<Runner> ThisFail = runner =>$/;"	f	class:Contest.Tests.TestClassOnePassOnFail	file:
ThisIsATest	src/Contest.Tests/TestClass.cs	/^        public Action<Runner> ThisIsATest = test =>$/;"	f	class:Contest.Tests.TestClass
ThisIsATest	src/Contest.Tests/Wrapper.cs	/^            Action<Runner> ThisIsATest = runner =>$/;"	f	class:Contest.Tests.Wrapper.Nested	file:
ThisIsAnotherTest	src/Contest.Tests/TestClass.cs	/^        Action<Runner> ThisIsAnotherTest = test =>$/;"	f	class:Contest.Tests.TestClass	file:
ThisIsntATestMethod	src/Contest.Tests/TestClass.cs	/^        public void ThisIsntATestMethod() { }$/;"	m	class:Contest.Tests.TestClass
ThisIsntATestMethod	src/Contest.Tests/Wrapper.cs	/^            void ThisIsntATestMethod() { }$/;"	m	class:Contest.Tests.Wrapper.Nested	file:
ThisIsntATestMethodEither	src/Contest.Tests/TestClass.cs	/^        void ThisIsntATestMethodEither() { }$/;"	m	class:Contest.Tests.TestClass	file:
ThisPass	src/Contest.Tests/TestClassOnePassOnFail.cs	/^        public Action<Runner> ThisPass = runner =>$/;"	f	class:Contest.Tests.TestClassOnePassOnFail
ThisThrowsAndPass	src/Contest.Tests/TestClassThrowingTests.cs	/^        public Action<Runner> ThisThrowsAndPass = $/;"	f	class:Contest.Tests.TestClassThrowingTests
ToString	src/Contest.Core/TestCase.cs	/^        public override string ToString() {$/;"	m	class:Contest.Core.TestCase
TypeExtensions	src/Contest.Core/TypeExtensions.cs	/^    public static class TypeExtensions {$/;"	c	namespace:Contest.Core
User	src/Contest.Demo/Demo.cs	/^	public class User {	$/;"	c	namespace:Demo
UsingRunnersBag	src/Contest.Tests/UsingRunnersBag.cs	/^    public class UsingRunnersBag {$/;"	c	namespace:Contest.Tests
Utils	src/Contest.Demo/Demo.cs	/^	class Utils {$/;"	c	namespace:Demo
WhenSplitTrimWhiteSpaces	src/Contest.Tests/IgnoreFixture.cs	/^            public void WhenSplitTrimWhiteSpaces() {$/;"	m	class:Contest.Tests.IgnoreFixture.ReadIgnoreFile
White	src/Contest.Core/Printer.cs	/^		static ConsoleColor White  = ConsoleColor.White;$/;"	f	class:Contest.Core.Printer	file:
WireGlobalSetups	src/Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireGlobalSetups = (actual, setups) => {$/;"	f	class:Contest.Core.Contest	file:
WireGlobalTeardowns	src/Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireGlobalTeardowns =$/;"	f	class:Contest.Core.Contest	file:
WireSetups	src/Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireSetups =$/;"	f	class:Contest.Core.Contest	file:
WireTeardowns	src/Contest.Core/Contest.cs	/^        static readonly Action<TestSuite, List<TestCase>> WireTeardowns =$/;"	f	class:Contest.Core.Contest	file:
Wrapper	src/Contest.Tests/Wrapper.cs	/^    class Wrapper {$/;"	c	namespace:Contest.Tests
WrongKindaException	src/Contest.Core/Runner.cs	/^        static readonly Func<Type, Type, string> WrongKindaException = $/;"	f	class:Contest.Core.Runner	file:
Yellow	src/Contest.Core/Printer.cs	/^		static ConsoleColor Yellow = ConsoleColor.Yellow;$/;"	f	class:Contest.Core.Printer	file:
_currCase	src/Contest.Core/Runner.cs	/^        string _currCase;$/;"	f	class:Contest.Core.Runner	file:
_errors	src/Contest.Core/Runner.cs	/^        readonly Dictionary<string, string> _errors = new Dictionary<string, string>();$/;"	f	class:Contest.Core.Runner	file:
_finder	src/Contest.Tests/CherryPickingFixture.cs	/^        readonly TestCaseFinder _finder = new TestCaseFinder();$/;"	f	class:Contest.Tests.CherryPickingFixture	file:
_finder	src/Contest.Tests/DiscoverFixture.cs	/^        readonly TestCaseFinder _finder = new TestCaseFinder();$/;"	f	class:Contest.Tests.DiscoverFixture	file:
_finder	src/Contest.Tests/RunFixture.cs	/^        readonly TestCaseFinder _finder = new TestCaseFinder();$/;"	f	class:Contest.Tests.RunFixture	file:
_users	src/Contest.Demo/Demo.cs	/^		static readonly List<string> _users = new List<string>();$/;"	f	class:Demo.User	file:
after_bar	src/Contest.Tests/BarTest.cs	/^            Action<Runner> after_bar  = runner => {};$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
after_each	src/Contest.Demo/Demo.cs	/^		_ after_each = test =>$/;"	f	class:Demo.Contest_201	file:
after_echo	src/Contest.Demo/Demo.cs	/^		_ after_echo = test => $/;"	f	class:Demo.Contest_301	file:
after_echo	src/Contest.Tests/UsingRunnersBag.cs	/^            Action<Runner> after_echo = test =>$/;"	f	class:Contest.Tests.UsingRunnersBag.EchoTest	file:
after_foo	src/Contest.Tests/FooTest.cs	/^        Action<Runner> after_foo  = runner => {};$/;"	f	class:Contest.Tests.FooTest	file:
after_test_cases_in_class	src/Contest.Tests/DiscoverFixture.cs	/^        public void after_test_cases_in_class() {$/;"	m	class:Contest.Tests.DiscoverFixture
bar	src/Contest.Tests/BarTest.cs	/^            Action<Runner> bar = assert => assert.Equal(1, 2);$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
before_bar	src/Contest.Tests/BarTest.cs	/^            Action<Runner> before_bar = runner => {};$/;"	f	class:Contest.Tests.BarTest.NestedBarTest	file:
before_each	src/Contest.Demo/Demo.cs	/^		_ before_each = test => {$/;"	f	class:Demo.Contest_201	file:
before_echo	src/Contest.Demo/Demo.cs	/^		_ before_echo = test => $/;"	f	class:Demo.Contest_301	file:
before_echo	src/Contest.Tests/UsingRunnersBag.cs	/^            Action<Runner> before_echo = test =>$/;"	f	class:Contest.Tests.UsingRunnersBag.EchoTest	file:
before_foo	src/Contest.Tests/FooTest.cs	/^        Action<Runner> before_foo = runner => {};$/;"	f	class:Contest.Tests.FooTest	file:
before_test_cases_in_assm	src/Contest.Tests/DiscoverFixture.cs	/^        public void before_test_cases_in_assm() {$/;"	m	class:Contest.Tests.DiscoverFixture
create_user_adds_new_user	src/Contest.Demo/Demo.cs	/^		_ create_user_adds_new_user = assert => {$/;"	f	class:Demo.Contest_201	file:
echo	src/Contest.Demo/Demo.cs	/^		_ echo = test => $/;"	f	class:Demo.Contest_301	file:
echo	src/Contest.Tests/UsingRunnersBag.cs	/^            Action<Runner> echo = test =>$/;"	f	class:Contest.Tests.UsingRunnersBag.EchoTest	file:
exptect_error_message_contains_fails	src/Contest.Demo/Demo.cs	/^		_ exptect_error_message_contains_fails = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_contains_pass	src/Contest.Demo/Demo.cs	/^		_ exptect_error_message_contains_pass = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_fails	src/Contest.Demo/Demo.cs	/^		_ exptect_error_message_fails = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
exptect_error_message_pass	src/Contest.Demo/Demo.cs	/^		_ exptect_error_message_pass = expects =>$/;"	f	class:Demo.ErrorMsgs	file:
find_existing_user_returns_user	src/Contest.Demo/Demo.cs	/^		_ find_existing_user_returns_user = assert => $/;"	f	class:Demo.Contest_201	file:
find_non_existing_user_returns_null	src/Contest.Demo/Demo.cs	/^		_ find_non_existing_user_returns_null = assert => $/;"	f	class:Demo.Contest_201	file:
foo	src/Contest.Tests/FooTest.cs	/^        Action<Runner> foo = assert => assert.Equal(1, 2);$/;"	f	class:Contest.Tests.FooTest	file:
ignore_all_cases	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_all_cases() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromCmdLine
ignore_all_cases	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_all_cases() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromIgnoreFile
ignore_cases_ending_with	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_ending_with() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromCmdLine
ignore_cases_ending_with	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_ending_with() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromIgnoreFile
ignore_cases_starting_with	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_starting_with() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromCmdLine
ignore_cases_starting_with	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_starting_with() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromIgnoreFile
ignore_cases_when_contains	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_when_contains() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromCmdLine
ignore_cases_when_contains	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_cases_when_contains() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromIgnoreFile
ignore_no_cases	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_no_cases() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromCmdLine
ignore_no_cases	src/Contest.Tests/IgnoreFixture.cs	/^            public void ignore_no_cases() {$/;"	m	class:Contest.Tests.IgnoreFixture.PatternsFromIgnoreFile
it_should_treat_exceptions_as_failing_tests	src/Contest.Demo/Demo.cs	/^        _ it_should_treat_exceptions_as_failing_tests = assert => {$/;"	f	class:Demo.HandlingExceptions	file:
run_only_cases_containing	src/Contest.Tests/CherryPickingFixture.cs	/^        public void run_only_cases_containing() {$/;"	m	class:Contest.Tests.CherryPickingFixture
run_only_cases_ending_with	src/Contest.Tests/CherryPickingFixture.cs	/^        public void run_only_cases_ending_with() {$/;"	m	class:Contest.Tests.CherryPickingFixture
run_only_cases_starting_with	src/Contest.Tests/CherryPickingFixture.cs	/^        public void run_only_cases_starting_with() {$/;"	m	class:Contest.Tests.CherryPickingFixture
run_test_suite	src/Contest.Tests/RunFixture.cs	/^        public void run_test_suite() {$/;"	m	class:Contest.Tests.RunFixture
run_throwing_test_suite	src/Contest.Tests/RunFixture.cs	/^        public void run_throwing_test_suite() {$/;"	m	class:Contest.Tests.RunFixture
should_run_setup_before_case_unless_setup_is_null	src/Contest.Tests/RunSetupsAndTeardowns.cs	/^        public void should_run_setup_before_case_unless_setup_is_null() {$/;"	m	class:Contest.Tests.RunSetupAndTeardown
should_run_teardown_after_case_unless_teardown_is_null	src/Contest.Tests/RunSetupsAndTeardowns.cs	/^        public void should_run_teardown_after_case_unless_teardown_is_null() {$/;"	m	class:Contest.Tests.RunSetupAndTeardown
test_cases_in_assm	src/Contest.Tests/DiscoverFixture.cs	/^        public void test_cases_in_assm() {$/;"	m	class:Contest.Tests.DiscoverFixture
test_cases_in_class	src/Contest.Tests/DiscoverFixture.cs	/^        public void test_cases_in_class() {$/;"	m	class:Contest.Tests.DiscoverFixture
test_cases_in_nested_classes	src/Contest.Tests/DiscoverFixture.cs	/^        public void test_cases_in_nested_classes() {$/;"	m	class:Contest.Tests.DiscoverFixture
this_is_a__should_throw__failing_test	src/Contest.Demo/Demo.cs	/^		_ this_is_a__should_throw__failing_test = test =>$/;"	f	class:Demo.Contest_101	file:
this_is_a__should_throw__passing_test	src/Contest.Demo/Demo.cs	/^        _ this_is_a__should_throw__passing_test = test =>$/;"	f	class:Demo.Contest_101	file:
this_is_a_failing_test	src/Contest.Demo/Demo.cs	/^		_ this_is_a_failing_test = assert =>$/;"	f	class:Demo.Contest_101	file:
this_is_a_passing_test	src/Contest.Demo/Demo.cs	/^		_ this_is_a_passing_test = assert => $/;"	f	class:Demo.Contest_101	file:
